/*
 * build.gradle for IA_Plugin module
 */

apply plugin: 'com.android.library'

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.2'
    sourceSets {
        main {
            java {
                srcDir 'src/main/java'
            }
            //jniLibs.srcDir = 'jniLibs'
        }
    }
    def apiKey = project.properties['indoorAtlasApiKey'] ?: "api-key-not-set";
    def apiSecret = project.properties['indoorAtlasApiSecret'] ?: "api-secret-not-set";

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 25

        //testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        resValue "string", "indooratlas_api_key", apiKey
        resValue "string", "indooratlas_api_secret", apiSecret.replaceAll("%", "\\\\u0025")
    }
    buildTypes {
        release {
            minifyEnabled false
        //    proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile files('libs/indooratlas-android-sdk-2.3.1.jar')
    //compile 'com.android.support:support-v4:23.4.0'
    //compile 'com.android.support:appcompat-v7:25.1.1'
    //compile 'com.google.android.gms:play-services-location:10.0.1'
    //compile 'com.google.android.gms:play-services-analytics:10.0.1'
    compile 'com.google.android.gms:play-services:8.1.0'
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'
    provided files('libs/classes.jar')
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

/*
 * Builds and Exports an iaplugin-debug.arr or iaplugin-release.aar under <Project>/iaplugin/build/outputs/aar/
 * Also copies the .aar to the corresponding Unity project folder (~/Unity/IndoorAtlas/Assets/Plugins/Android/).
 * To execute this task,
 * Gradle projects >> :iaplugin >> Tasks >> plugin >> deployDebug/ReleasePluginArchive
 */
android.libraryVariants.all { variant ->

    String variantName = "${variant.name.capitalize()}"; // Like 'Debug'
    String deployTaskGroup = "plugin";
    String deployTaskName = "deploy${variantName}PluginArchive"; // Like 'deployDebugPluginArchive'
    String dependencyTaskName = "assemble${variantName}"; // Like 'assembleDebug'
    // Source.
    String sourceAARFolder = "${buildDir.getPath()}/outputs/aar/";
    String sourceAARName = "${project.name}-${variant.name}.aar";
    // Target.
    String targetAssetFolder = "Assets/Plugins/Android";
    String targetAARFolder = "${rootDir.getPath()}/../../Unity/IndoorAtlas/${targetAssetFolder}"; // Navigate into 'Assets'
    String targetAARName = "IA Plugin Android.aar"; // The form you ship your plugin
    // Create task.
    task(deployTaskName, dependsOn: dependencyTaskName, type: Copy) {
        from(sourceAARFolder)
        into(targetAARFolder)
        include(sourceAARName)
        rename(sourceAARName, targetAARName)
    }.group = deployTaskGroup;

}